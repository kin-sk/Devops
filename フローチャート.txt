portfolio-site/
├── app/
│   ├── static/        # CSS, JS, 画像ファイル
│   ├── templates/     # HTMLファイル
│   ├── database.db    # SQLiteデータベース
│   └── app.py         # アプリケーションのメインスクリプト
├── venv/              # 仮想環境（必要なら）
└── requirements.txt   # 必要なパッケージリスト


機能案として
・自己紹介ページ：プロフィールやスキル紹介
・プロジェクト一覧：プロジェクト作品の情報やデータベースから取得し、一覧表示
・コンタクトフォーム：ローカルメールサーバーを使用してフォームの内容をメールで送信

データベース
・SQLiteで「プロジェクト一覧」や「スキル」を紹介
・テーブル
　→projects：プロジェクトのタイトル、説明、リンク
　→skills：スキル名、レベル

手順
１．環境の準備
・VS Codeを使用し、Pythonの仮想環境をセットアップ
・必要なライブラリをインストール
　→pip install flask sqlalchemy

２．データベースを作成
・SQLiteを使用してプロジェクト情報を管理
・SQLAlchemyでデータベース操作を実装

３．フロントエンドをデザイン
・Bootstrapや自作CSSでレスポンシブなデザインを作成
・データベースから取得した情報をHTMLテンプレートで動的に表示

４．ロジックを実装
・Flaskアプリでルーティングを設定し、各ページをローカルで動作するようにする




データベーススキーマ

ER図
User (1) ------ (N) Projects
User (1) ------ (N) Skills


テーブル設計
１．usersテーブル
・id：ユーザーID（主キー）
・name：名前
・profile：プロフィールテキスト
・email：メールアドレス
・phone：電話番号

２．projectsテーブル
・id：プロジェクトID（主キー）
・user_id：ユーザーID（外部キー、users.idと関連付け）
・title：プロジェクトタイトル
・description：説明
・url：プロジェクトURL
・technologies：使用技術（例：Python，Flask）

３．skillsテーブル
・id：スキルID（主キー）
・user_id：ユーザーID（外部キー、users.idと関連付け）
・name：スキル名
・level：レベル（例：初級、中級、上級）

４．contactsテーブル
・id：メッセージID（主キー）
・name：送信者名
・email：送信者メールアドレス
・message：メッセージ内容

